generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum GlobalRole {
  SUPER_ADMIN
  VILLAGE_MEMBER
  CHOKHLA_MEMBER
}

enum OccupationType {
  AGRICULTURE
  BUSINESS
  SERVICE
  LABOUR
  STUDENT
  UNEMPLOYED
  OTHER
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  choklaId     String
  globalRole   GlobalRole
  fullName     String
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  refreshToken String?
  lastLogin    DateTime?
  lastLogout   DateTime?
  villageId    String?
  mobileNumber String?
  village      Village?   @relation(fields: [villageId], references: [id])

  @@map("users")
}

model Chakola {
  id            String   @id @default(uuid())
  name          String
  adhyaksh      String?
  contactNumber String?
  state         String?
  district      String?
  villageName   String?
  createdDate   DateTime @default(now())
  updatedDate   DateTime @updatedAt

  villages Village[]

  @@map("chakola")
}

model Village {
  id                             String   @id @default(uuid())
  name                           String
  villageMemberName              String?
  mobileNumber                   String?
  age                            Int?
  email                          String?
  tehsil                         String?
  district                       String?
  state                          String?
  isVillageHaveSchool            Boolean  @default(false)
  isVillageHavePrimaryHealthCare Boolean  @default(false)
  isVillageHaveCommunityHall     Boolean  @default(false)
  longitude                      Float?
  latitude                       Float?
  choklaId                       String
  chakola                        Chakola  @relation(fields: [choklaId], references: [id])
  families                       Family[]
  people                         Person[]

  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  User        User[]

  @@map("village")
}

model Family {
  id               String   @id @default(uuid())
  mukhiyaName      String
  currentAddress   String
  status           String
  economicStatus   String
  villageId        String
  village          Village  @relation(fields: [villageId], references: [id])
  Person           Person[]
  chakolaId        String?
  createdDate      DateTime @default(now())
  updatedDate      DateTime @updatedAt
  longitude        Float?
  latitude         Float?
  anyComment       String?
  familyDistrict   String
  familyState      String
  familyPincode    String
  permanentAddress String?

  @@map("family")
}

model Person {
  // persnal details
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  age           Int
  gender        Gender
  relation      String
  maritalStatus String
  gotra         String
  disability    Boolean
  bloodGroup    String
  mobileNumber  String
  email         String

  // address details
  permanentAddress        String
  currentAddress          String
  state                   String
  district                String
  pincode                 String
  village                 String
  isCurrentAddressInIndia Boolean
  currentCountry          String  @default("India")

  // === Educational Details ===
  isStudent               Boolean
  educationLevel          String
  classCompleted          String
  currentClass            String?
  collegeCourse           String
  institutionName         String
  enrollmentStatus        String?
  schoolName              String?
  higherEducationType     String?
  currentEducationCity    String?
  currentEducationCountry String?
  isHelpRequiredFromSamaj Boolean

  isCurrentlyEnrolled Boolean?
  dropoutReason       String?
  educationMode       String?
  isStudyingAbroad    Boolean?
  scholarshipReceived Boolean?
  scholarshipDetails  String?
  boardOrUniversity   String?
  yearOfPassing       Int?
  fieldOfStudy        String?

  // employement details 
  isEmployed          Boolean @default(false)
  occupationType      String?
  employmentStatus    String?
  monthlyIncome       Float?
  incomeSourceCountry Boolean @default(false)
  countryName         String?

  jobCategory              String?
  employerOrganizationName String?
  isGovernmentJob          Boolean? @default(false)
  jobPosition              String?
  jobType                  String?
  workExperienceYears      Int?

  isSelfEmployed       Boolean? @default(false)
  selfEmployedJobType  String?
  nameOfBusiness       String?
  businessCategory     String?
  sizeOfBusiness       String?
  businessRegistration Boolean? @default(false)
  willingToHirePeople  Boolean? @default(false)

  // Added missing business fields:
  businessType       String?
  customBusinessType String?
  numberOfEmployees  Int?
  needsEmployees     Boolean? @default(false)

  occupationState      String?
  occupationCity       String?
  preferredJobLocation String?
  isOpenToRelocate     Boolean? @default(false)
  workingHoursPerWeek  Int?
  hasAdditionalSkills  Boolean? @default(false)

  // living status
  livestock      String
  landOwned      Float
  houseType      String
  houseOwnership String
  hasElectricity Boolean
  waterSource    String
  hasToilet      Boolean
  cookingFuel    String

  // health issue
  hasHealthIssues                  Boolean
  chronicDisease                   String
  isVaccinated                     Boolean
  hasHealthInsurance               Boolean
  isInterestedInFutureHealthPolicy Boolean @default(false)

  // wellfare schemes and survey 
  hasSmartphone                    Boolean
  hasInternet                      Boolean
  hasBankAccount                   Boolean
  hasJanDhan                       Boolean
  isMukhiya                        Boolean
  welfareSchemes                   String[]
  isInterestedInFutureSamuhikVivah Boolean  @default(false)
  vehicleType                      String

  // relation with other table 
  familyId    String
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  family      Family   @relation(fields: [familyId], references: [id])
  villageId   String?
  villageRel  Village? @relation(fields: [villageId], references: [id])

  // added missing custom job sector field
  customJobSearchSector String?

  @@map("person")
}
